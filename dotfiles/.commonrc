ZSH=$(command -v zsh)
export ZSH
export HISTSIZE=1000
export SAVEHIST=1000
export DIRSTACKSIZE=100
export EDITOR='vim'
export VISUAL='vim'
export PAGER='less -rN'

if [ -x "$(command -v go)" ]; then
    export GOPATH=${HOME}/go
    export PATH="$PATH:${GOPATH}/bin"
fi

alias v='vim -p'
alias vd='vim -d'
alias x='xargs'

case "$(uname)" in
    Darwin)
        alias l='ls -lahFG'
        alias sed='gsed'
        alias gopen='open -a "/Applications/Google Chrome.app"'
        alias c='pbcopy'
        ;;
    Linux)
        alias l='ls -lahF --color=auto'
        if [ -x "$(command -v clip.exe)" ]; then
            alias c='iconv -t sjis | clip.exe'
        fi
        ;;
esac

if [ -x "$(command -v keychain)" ]; then
    for key in "${HOME}"/.ssh/*.pem; do
        keychain -q "${key}"
    done
    # shellcheck disable=SC1090
    . "${HOME}/.keychain/${HOST}-sh"
fi

pt() {
    # alias pt='parquet-tools'
    docker run --rm \
        -v "$(pwd):/work" \
        -w /work \
        nathanhowell/parquet-tools:latest "${@}"
}

rl() {
    echo "Reload shell ${SHELL}"
    exec "${SHELL}" -l
}

peco_history() {
    # shellcheck disable=SC2034
    BUFFER=$(history -n 1 | tac | peco)
    # shellcheck disable=SC2034
    CURSOR=$#BUFFER
    command -v zle && zle reset-prompt
}

peco_find() {
    local r
    r=$(find . -type f | sort | peco)
    if [ -n "${r}" ]; then
        vim --not-a-term "${r}"
    fi
    command -v zle && zle reset-prompt
}



##################################################
# Git
##################################################
alias g='git'
alias ga='git add'
alias gb='git branch'
alias gc='git checkout'
alias gd='git diff'
alias gdc='git diff --cached'
alias gdd='git difftool'
alias gf='git fetch'
alias gfp='git fetch --prune'
alias gg='git grep -n'
alias gl="git log --graph --all --pretty=format:'%C(yellow)%h %C(cyan)%cd %C(reset)%s %C(red)%d %C(bold blue)<%an>%C(reset)' --abbrev-commit --date=format:'%Y-%m-%d %H:%M:%S'"
alias gla='git log --graph --all --abbrev-commit'
alias glp='git log -p --follow'
alias gm='git commit -m'
alias gma='git commit --amend'
alias gpl='git pull'
alias gps='git push'
alias gr='git reset'
alias gs='git status -bsu'
alias gst='git stash'

peco_ghq_look() {
    local r
    r=$(ghq list | sort | peco)
    if [ -n "${r}" ]; then
        cd "$(ghq root)/${r}" || exit 1
    fi
    command -v zle && zle reset-prompt
}

peco_git_branch() {
    local r
    r=$(git branch --format='%(refname:short)' | tr -d ' ' | sort | peco)
    if [ -n "${r}" ]; then
        git checkout "${r}"
    fi
    command -v zle && zle reset-prompt
}


##################################################
# Docker
##################################################
alias d='docker'
alias db='docker build --force-rm --rm --no-cache'
alias de='docker exec -it'
alias di='docker image ls'
alias dn='docker network ls'
alias dp='docker container ls -a'
alias dr='docker run -it --rm'
alias dv='docker volume ls'

alias dc='docker-compose'
alias dcb='docker-compose build --no-cache --force-rm'
alias dcd='docker-compose down -v'
alias dce='docker-compose exec'
alias dcp='docker-compose ps'
alias dcr='docker-compose run --rm'
alias dcu='docker-compose up'

alias k='kubectl'

mini() {
    eval "$(minikube -p minikube docker-env)"
}

docker_clean() {
    docker image ls --filter dangling=true --format '{{.ID}}' \
    | xargs --no-run-if-empty docker image rm
}


##################################################
# Terraform
##################################################
alias tf='terraform'
alias tff='terraform fmt -recursive'


##################################################
# AWS
##################################################
export AWS_DEFAULT_OUTPUT=json
export AWS_DEFAULT_REGION=ap-northeast-1

alias awsme='aws sts get-caller-identity'

awsin () {
    saml2aws login --skip-prompt --force \
      --profile="${AWS_PROFILE}" \
      --role="${AWS_PROFILE}"
}

ecsin() {
    local aws_region account_id
    aws_region=${1:-${AWS_DEFAULT_REGION}}
    account_id=$(aws sts get-caller-identity --query 'Account' --output text)
    aws ecr get-login-password --region "${aws_region}" \
    | docker login --username AWS --password-stdin \
        "${account_id}.dkr.ecr.${aws_region}.amazonaws.com"
}

peco_aws_profile() {
    local r
    r=$(
        cat ~/.aws/credentials ~/.aws/config 2>/dev/null \
        | grep '^\[.*\]' | tr -d '[]'| sort | peco
    )
    if [ -n "${r}" ]; then
        export AWS_PROFILE="${r//profile /}"
    else
        unset AWS_PROFILE
    fi
    command -v zle && zle reset-prompt
}

##################################################
# GCP
##################################################
export PATH="${PATH}:/usr/local/gcloud/google-cloud-sdk/bin"

# if [ -x "$(command -v gcloud)" ]; then
#     gcloud_root=$(gcloud info --format='value(installation.sdk_root)')
#     # shellcheck disable=SC1090
#     . "${gcloud_root}/path.zsh.inc"
#     # shellcheck disable=SC1090
#     . "${gcloud_root}/completion.zsh.inc"
# fi
