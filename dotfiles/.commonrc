if [ -x $(which go) ]; then
    export GOPATH=~/go
    export "PATH=$PATH:${GOPATH}/bin"
fi

export ZSH="$(which zsh)"
export HISTSIZE=1000
export SAVEHIST=1000
export DIRSTACKSIZE=100

export EDITOR='vim'
export VISUAL='vim'
export PAGER='less -rN'

alias v='vim -p'
alias vd='vim -d'
alias x='xargs'

alias pt='parquet-tools'

case "$(uname)" in
    Darwin)
        alias l='ls -lahFG'
        alias sed='gsed'
        alias gopen='open -a "/Applications/Google Chrome.app"'
        ;;
    Linux)
        alias l='ls -lahF --color=auto'
        ;;
esac

if [ -x $(which keychain) ]; then
    for key in $(ls -1 ~/.ssh | grep '\.pem$'); do
        keychain -q ~/.ssh/${key}
    done
    . ~/.keychain/${HOST}-sh
fi

function rl() {
    echo "Reload shell ${SHELL}"
    exec ${SHELL} -l
}

function peco_history() {
    BUFFER=$(history -n 1 | tac | peco)
    CURSOR=$#BUFFER
    which zle && zle reset-prompt
}

function peco_find() {
    local r=$(find . -type f | sort | peco)
    [ -n "${r}" ] && vim --not-a-term ${r}
    which zle && zle reset-prompt
}


##################################################
# Git.
##################################################
alias g='git'
alias ga='git add'
alias gb='git branch'
alias gc='git checkout'
alias gd='git diff'
alias gdc='git diff --cached'
alias gdd='git difftool'
alias gf='git fetch'
alias gfp='git fetch --prune'
alias gg='git grep -n'
alias gl="git log --graph --all --pretty=format:'%C(yellow)%h %C(cyan)%cd %C(reset)%s %C(red)%d %C(bold blue)<%an>%C(reset)' --abbrev-commit --date=format:'%Y-%m-%d %H:%M:%S'"
alias gla='git log --graph --all --abbrev-commit'
alias glp='git log -p --follow'
alias gm='git commit -m'
alias gma='git commit --amend'
alias gpl='git pull'
alias gps='git push'
alias gr='git reset'
alias gs='git status -bsu'
alias gst='git stash'

function peco_ghq_look() {
    local r=$(ghq list | sort | peco)
    [ -n "${r}" ] && cd $(ghq root)/${r}
    which zle && zle reset-prompt
}

function peco_git_branch() {
    local r=$(git branch --format='%(refname:short)' | tr -d ' ' | sort | peco)
    [ -n "${r}" ] && git checkout ${r}
    which zle && zle reset-prompt
}

##################################################
# Docker.
##################################################
alias d='docker'
alias db='docker build --force-rm --rm --no-cache'
alias de='docker exec -it'
alias di='docker image ls'
alias dn='docker network ls'
alias dp='docker container ls -a'
alias dr='docker run -it --rm'
alias dv='docker volume ls'

alias dc='docker-compose'
alias dcb='docker-compose build --no-cache'
alias dcd='docker-compose down -v'
alias dce='docker-compose exec'
alias dcp='docker-compose ps'
alias dcr='docker-compose run --rm'
alias dcu='docker-compose up'

alias k='kubectl'

function mini() {
    eval $(minikube -p minikube docker-env)
}

function docker_clean() {
    docker image ls --filter dangling=true --format '{{.ID}}' | xargs --no-run-if-empty docker image rm
}


##################################################
# Terraform.
##################################################
alias tf='terraform'
alias tff='terraform fmt -recursive'


##################################################
# AWS.
##################################################
export AWS_DEFAULT_OUTPUT=json
export AWS_DEFAULT_REGION=ap-northeast-1

alias awsme='aws sts get-caller-identity'

function ecsin() {
    local aws_region=${1:-${AWS_DEFAULT_REGION}}
    local account_id=$(aws sts get-caller-identity --query 'Account' --output text)
    aws ecr get-login-password --region ${aws_region} \
    | docker login --username AWS --password-stdin \
      ${account_id}.dkr.ecr.${aws_region}.amazonaws.com
}

function peco_aws_profile() {
    local r=$(
        cat ~/.aws/credentials ~/.aws/config 2>/dev/null \
        | grep '^\[.*\]' | tr -d '[]'| sort | peco
    )
    if [ -n "${r}" ]; then
        export AWS_PROFILE="$(echo ${r} | sed -e 's/profile //')"
    else
        unset AWS_PROFILE
    fi
    which zle && zle reset-prompt
}

##################################################
# GCP.
##################################################
export PATH=${PATH}:/usr/local/gcloud/google-cloud-sdk/bin

# if [ -x $(which gcloud) ]; then
#     local gcloud_root=$(gcloud info --format='value(installation.sdk_root)')
#     . ${gcloud_root}/path.zsh.inc
#     . ${gcloud_root}/completion.zsh.inc
# fi
